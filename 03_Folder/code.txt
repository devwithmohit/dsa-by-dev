// import java.util.ArrayList;
// import java.util.List;

// class Backtracking2 {
//     public Boolean isSafe(char [][] QueenBoard,int row , int col){
//           int n = QueenBoard.length;
//         if(int j = 0 ; j < QueenBoard.length ; j ++){
//            if(QueenBoard[row][j] == "Q";){

//                return false;
//            }
//         }
//         if(int i = 0 ; i < QueenBoard.length ; i ++){
//            if( QueenBoard[i][col] = "Q"){

//                return false;
//            }

//         }

//         // Check upper-left diagonal
//         for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
//             if (board[i][j] == 'Q') return false;
//         }

//         // Check lower-left diagonal
//         for (int i = row + 1, j = col - 1; i < n && j >= 0; i++, j--) {
//             if (board[i][j] == 'Q') return false;
//         }

//         public void saveBoard(char[][] QueenBoard, List<List<String>> allBoard){
//             String row = "";
//             List<String> Board = new ArrayList<>();

//             for(int i = 0 ; i < Board.length ; i ++){
//                 row = "";
//                 for(int j = 0 ; j < Board.length ; j ++){
//                     if(Board[i][j] == "Q")
//                     row += "Q";
//                 }else{

//                     row += ".";
//                 }
//                 Board.add(row);
//             }
//             allBoard.add(Board)

//         }
//     }

//     public void helper(char[][] QueenBoard, List<List<String>> allBoard, int col) {
//         if (col == QueenBoard.length) {
//             saveBoard(QueenBoard, allBoard);
//             return;

//         }
//         for (int row = 0; row < QueenBoard.length; row++) {
//             if (isSafe(col, row, QueenBoard)) {
//                 QueenBoard[row][col] = 'Q';
//                 helper(QueenBoard, allBoard, col + 1);
//                 QueenBoard[row][col] = ".";

//             }
//         }
//     }

//     public List<List<String>> SolveQueen(int n) {
//         List<List<String>> allBoard = new ArrayList<>();

//         char[][] QueenBoard = new QueenBoard[n][n];
//         helper(QueenBoard, allBoard, 0);
//     }

// }